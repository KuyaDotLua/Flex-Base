#include "exploits.h"
#include <iostream>
#include <thread>
int gucio = 0;

static bool speed = false;
i_exploits& i_exploits::exp()
{
	static i_exploits ins;
	return ins;
}
struct color_t
{
	BYTE r, g, b, a;

	color_t(float r_, float g_, float b_, float a_) {
		r = r_;
		g = g_;
		b = b_;
		a = a_;
	}

};

void noclipguide()
{
	FlexUIIO& io = FlexUI::GetIO();
	ImVec2 window_pos = ImVec2(10, 50);  // Nueva posición de la marca de agua (un poco más abajo)
	FlexUI::SetNextWindowPos(window_pos, FlexUICond_Always);
	FlexUI::SetNextWindowSize(ImVec2(0, 0));

	FlexUI::PushStyleColor(FlexUICol_WindowBg, ImVec4(0, 0, 0, 0.5f));  // Fondo negro semitransparente

	FlexUI::Begin("RedEye MND1337", nullptr, FlexUIWindowFlags_NoTitleBar | FlexUIWindowFlags_NoResize | FlexUIWindowFlags_NoMove | FlexUIWindowFlags_NoScrollbar | FlexUIWindowFlags_NoInputs);

	// Calcular el ancho del texto "Noclip Enabled" y centrarlo
	float text_width = FlexUI::CalcTextSize("Noclip Enabled").x;
	float window_width = FlexUI::GetWindowSize().x;
	float text_x = (window_width - text_width) * 0.5f;

	FlexUI::SetCursorPosX(text_x);
	FlexUI::PushStyleColor(FlexUICol_Text, ImVec4(0, 1, 0, 1));  // Texto verde
	FlexUI::Text("Noclip Enabled");
	FlexUI::PopStyleColor();

	FlexUI::Separator();  // Línea separadora

	FlexUI::SetCursorPosX((FlexUI::GetWindowSize().x - FlexUI::CalcTextSize("Move up: Q").x) * 0.5f);
	FlexUI::Text("Move up: Q");

	FlexUI::SetCursorPosX((FlexUI::GetWindowSize().x - FlexUI::CalcTextSize("Move down: E").x) * 0.5f);
	FlexUI::Text("Move down: E");

	FlexUI::SetCursorPosX((FlexUI::GetWindowSize().x - FlexUI::CalcTextSize("Move left: A").x) * 0.5f);
	FlexUI::Text("Move left: A");

	FlexUI::SetCursorPosX((FlexUI::GetWindowSize().x - FlexUI::CalcTextSize("Move right: D").x) * 0.5f);
	FlexUI::Text("Move right: D");

	FlexUI::SetCursorPosX((FlexUI::GetWindowSize().x - FlexUI::CalcTextSize("Move forward: W").x) * 0.5f);
	FlexUI::Text("Move forward: W");

	FlexUI::SetCursorPosX((FlexUI::GetWindowSize().x - FlexUI::CalcTextSize("Move back: S").x) * 0.5f);
	FlexUI::Text("Move back: S");

	FlexUI::SetCursorPosX((FlexUI::GetWindowSize().x - FlexUI::CalcTextSize("Disable Noclip: ALT").x) * 0.5f);
	FlexUI::Text("Disable Noclip: ALT");

	FlexUI::End();

	FlexUI::PopStyleColor();
}


void i_exploits::exploits_init()
{
	uintptr_t WeaponManager = i_memory::reeq().Read<uintptr_t>(i_dupa::skid().i_localplayer + i_dupa::skid().weaponmanager);
	uintptr_t weaponinfo = i_memory::reeq().Read<uintptr_t>(WeaponManager + 0x20);
	if (boostvehicle)
	{
		uintptr_t localplayer = i_dupa::skid().i_localplayer;
		uintptr_t actualcar = i_memory::reeq().Read<uintptr_t>(localplayer + i_dupa::skid().i_veh);
		uintptr_t handling = i_memory::reeq().Read<uintptr_t>(actualcar + i_dupa::skid().i_handling);
		i_memory::reeq().Write<float>(handling + 0x4C, boostvalue);


	}

	if (noclip)
	{
		noclipguide();
		uintptr_t camera = i_memory::reeq().Read<uintptr_t>(i_dupa::skid().i_camera + 0x0);
		D3DXVECTOR3 playerPosition = i_memory::reeq().Read<D3DXVECTOR3>(i_dupa::skid().i_localplayer + 0x90);
		D3DXVECTOR3 angles = i_memory::reeq().Read<D3DXVECTOR3>(camera + 0x03D0);

		if (GetAsyncKeyState(0x57) & 0x8000) // Tecla E presionada
		{
			// Hacia adelante
			playerPosition.y += noclipspeed;
		}

		if (GetAsyncKeyState(0x53) & 0x8000) // Tecla F presionada
		{
			// Hacia atrás
			playerPosition.y -= noclipspeed;
		}

		if (GetAsyncKeyState(0x51) & 0x8000) // Flecha hacia arriba presionada
		{
			// Hacia arriba
			playerPosition.z += noclipspeed;
		}

		if (GetAsyncKeyState(0x45) & 0x8000) // Flecha hacia abajo presionada
		{
			// Hacia abajo
			playerPosition.z -= noclipspeed;
		}

		if (GetAsyncKeyState(0x41) & 0x8000) // Flecha izquierda presionada
		{
			// Hacia la izquierda
			playerPosition.x -= noclipspeed;
		}

		if (GetAsyncKeyState(0x44) & 0x8000) // Flecha derecha presionada
		{
			// Hacia la derecha
			playerPosition.x += noclipspeed;
		}

		if (GetAsyncKeyState(0x12) & 0x8000) // Tecla alt presionada
		{
			// Desactiva Noclip
			noclip = false;
		}

		// Actualizar la posición del jugador
		i_memory::reeq().Write<D3DXVECTOR3>(i_dupa::skid().i_localplayer + 0x90, playerPosition);

		// Actualizar la posición de navegación
		uintptr_t navigation = i_memory::reeq().Read<uintptr_t>(i_dupa::skid().i_localplayer + 0x30);
		i_memory::reeq().Write<D3DXVECTOR3>(navigation + 0x30, playerPosition);
		i_memory::reeq().Write<D3DXVECTOR3>(navigation + 0x50, playerPosition);
	}



	if (godmodee)
	{

		i_memory::reeq().Write<float>(i_dupa::skid().i_localplayer + 0x280, 200);
		i_memory::reeq().Write<float>(i_dupa::skid().i_localplayer + i_dupa::skid().armoroffset, 100);

	}
	if (customspeed)
	{
		uintptr_t Playerinfo = i_memory::reeq().Read<uintptr_t>(i_dupa::skid().i_localplayer + 0x10C8);
		i_memory::reeq().Write<float>(Playerinfo + 0x0CF0, playerspeed);


		i_memory::reeq().Write<float>(Playerinfo + 0x0170, swimspeed2);
	}

	if (infinitestamina)
	{
		uintptr_t Playerinfo = i_memory::reeq().Read<uintptr_t>(i_dupa::skid().i_localplayer + 0x10C8);
		i_memory::reeq().Write<float>(Playerinfo + 0x0CF4, 100);
	}
	else { uintptr_t Playerinfo = i_memory::reeq().Read<uintptr_t>(i_dupa::skid().i_localplayer + 0x10C8); i_memory::reeq().Write<float>(Playerinfo + 0x0CF4, 1); }

	if (norecoil)
	{
		i_memory::reeq().Write<float>(weaponinfo + 0x2F4, 0.f);
	}
	else { i_memory::reeq().Write<float>(weaponinfo + 0x2F4, 1.f); }

	if (nospread)
	{
		i_memory::reeq().Write<float>(weaponinfo + 0x84, 0.f);
	}
	else { i_memory::reeq().Write<float>(weaponinfo + 0x84, 1.f); }

	if (noreload)
	{
		i_memory::reeq().Write<float>(weaponinfo + 0x134, 1000);
	}
	else { i_memory::reeq().Write<float>(weaponinfo + 0x134, 1); }
	if (infiniteammo)
	{
		uintptr_t AmmoInfo = i_memory::reeq().Read<uintptr_t>(weaponinfo + 0x60);

		uintptr_t AmmoCount = i_memory::reeq().Read<uintptr_t>(AmmoInfo + 0x8);

		uintptr_t AmmoCount2 = i_memory::reeq().Read<uintptr_t>(AmmoCount + 0x0);
		int actualammo = i_memory::reeq().Read<uintptr_t>(AmmoCount2 + 0x18);

		i_memory::reeq().Write<float>(AmmoCount2 + 0x18, 30);
	}
	if (damageboos)
	{
		i_memory::reeq().Write<float>(weaponinfo + 0xB0, damageamount);
	}
	if (customfov)
	{
		DWORD64 cameraaddr = i_memory::reeq().Read<DWORD64>(i_memory::reeq().base + i_dupa::skid().i_camera);
		uintptr_t CameraData = i_memory::reeq().Read<uintptr_t>(cameraaddr + 0x10);
		i_memory::reeq().Write<float>(CameraData + 0x30, fovvalue);
	}





}




void i_exploits::start()
{
	if (i_dupa::skid().i_localplayer)
	{
		i_exploits::exploits_init();

	}
}
